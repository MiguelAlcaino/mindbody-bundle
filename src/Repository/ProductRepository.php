<?php

namespace MiguelAlcaino\MindbodyPaymentsBundle\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use MiguelAlcaino\MindbodyPaymentsBundle\Entity\Discount;
use MiguelAlcaino\MindbodyPaymentsBundle\Entity\Product;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Product::class);
    }

    /**
     * @param Product $product
     * @return Discount
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getMainDiscount(Product $product)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('d')
            ->from(Discount::class, 'd')
            ->leftJoin('d.productDiscounts', 'pd')
            ->where('pd.product = :product')
            ->setParameter('product', $product)
            ->andWhere('pd.isMainProduct = true')
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param $discount
     * @return Product[]
     */
    public function getActiveProductsOfDiscount($discount)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from(Product::class, 'p')
            ->leftJoin('p.productDiscounts', 'pd')
            ->where('pd.discount = :discount')
            ->setParameter('discount', $discount)
            ->andWhere('pd.active = true')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @return Product[]
     */
    public function getMainProductsWithDiscounts()
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('p, pd, d')
            ->from(Product::class, 'p')
            ->leftJoin('p.productDiscounts', 'pd')
            ->leftJoin('pd.discount', 'd')
            ->where('pd.isMainProduct = true')
            ->getQuery();

        return $query->getResult();
    }

    public function getServices()
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from(Product::class, 'p')
            ->where('p.isDeleted = false')
            ->andWhere('p.isMembership = false')
            ->andWhere('p.price > 0')
            ->orderBy('p.name', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    public function getFreeServices()
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('p')
            ->from(Product::class, 'p')
            ->where('p.isDeleted = false')
            ->andWhere('p.isMembership = false')
            ->andWhere('p.isTrialPackage = :is_trial_package')
            ->setParameter('is_trial_package', true)
            ->orderBy('p.name', 'ASC')
            ->getQuery();

        return $query->getResult();
    }
}
