<?php

namespace MiguelAlcaino\MindbodyPaymentsBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use MiguelAlcaino\MindbodyPaymentsBundle\Entity\Customer;
use MiguelAlcaino\MindbodyPaymentsBundle\Entity\TransactionRecord;

/**
 * TransactionRecordRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRecordRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param int $id
     * @param bool $returnArray
     * @return array|mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @author malcaino
     */
    public function getOneById($id, $returnArray = false)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('t,c')
            ->from(TransactionRecord::class, 't')
            ->leftJoin('t.customer', 'c')
            ->where('t.id = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $returnArray ? $query->getArrayResult() : $query->getOneOrNullResult();
    }

    public function getAllBy($criteria = [], $limit = 50, $offset = 0, $returnArray = false)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('t,ti,c')
            ->from(TransactionRecord::class, 't')
            ->leftJoin('t.transactionItems', 'ti')
            ->leftJoin('t.customer', 'c')
            ->orderBy('t.created', 'DESC')
            ->setMaxResults($limit)
            ->setFirstResult($offset);

        if (array_key_exists('customerName', $criteria)) {
            $query->where('c.firstName LIKE :search')
                ->orWhere('c.lastName LIKE :search')
                ->setParameter('search', '%' . $criteria['customerName'] . '%');
        }

        if (array_key_exists('customerName', $criteria) && array_key_exists('start', $criteria)) {
            $query->andWhere('t.created >= :start AND t.created <= :end')
                ->setParameter('start', $criteria['start'])
                ->setParameter('end', $criteria['end']);
        } elseif (array_key_exists('start', $criteria) && !array_key_exists('customerName', $criteria)) {
            $query->where('t.created >= :start AND t.created <= :end')
                ->setParameter('start', $criteria['start'])
                ->setParameter('end', $criteria['end']);
        }

        return $returnArray ? $query->getQuery()->getArrayResult() : $query->getQuery()->getResult();
    }

    public function getForExcel($criteria = [], $returnArray = false)
    {
        //partial c.{id, firstName, lastName, email}, partial t.{id, creditCardChargeId, amount, taxAmount, merchantId, created, refundDate, status, merchantPurchaseId, installments, authorizationCode, paymentTransaction, userPreferredLocation, discountCode, discountAmount
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('t,c,ti')
            ->from(TransactionRecord::class, 't')
            ->leftJoin('t.customer', 'c')
            ->leftJoin('t.transactionItems', 'ti')
            ->orderBy('t.created', 'DESC');

        if (array_key_exists('customerName', $criteria)) {
            $query->where('c.firstName LIKE :search')
                ->orWhere('c.lastName LIKE :search')
                ->setParameter('search', '%' . $criteria['customerName'] . '%');
        }

        if (array_key_exists('customerName', $criteria) && array_key_exists('start', $criteria)) {
            $query->andWhere('t.created >= :start AND t.created <= :end')
                ->setParameter('start', $criteria['start'])
                ->setParameter('end', $criteria['end']);
        } elseif (array_key_exists('start', $criteria) && !array_key_exists('customerName', $criteria)) {
            $query->where('t.created >= :start AND t.created <= :end')
                ->setParameter('start', $criteria['start'])
                ->setParameter('end', $criteria['end']);
        }

        return $returnArray ? $query->getQuery()->getArrayResult() : $query->getQuery()->getResult();
    }

    public function countBy($criteria)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(t.id)')
            ->from(TransactionRecord::class, 't')
            ->leftJoin('t.customer', 'c');

        if (array_key_exists('customerName', $criteria)) {
            $query->where('c.firstName LIKE :search')
                ->orWhere('c.lastName LIKE :search')
                ->setParameter('search', '%' . $criteria['customerName'] . '%');
        }

        if (array_key_exists('customerName', $criteria) && array_key_exists('start', $criteria)) {
            $query->andWhere('t.created >= :start AND t.created <= :end')
                ->setParameter('start', $criteria['start'])
                ->setParameter('end', $criteria['end']);
        } elseif (array_key_exists('start', $criteria) && !array_key_exists('customerName', $criteria)) {
            $query->where('t.created >= :start AND t.created <= :end')
                ->setParameter('start', $criteria['start'])
                ->setParameter('end', $criteria['end']);
        }

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getTransactionRecordsSinceLastDiscountUsed(Customer $customer, $returnArray = false)
    {
        $rawQuery = '
            SELECT * 
            FROM transaction_record 
            WHERE id >= (
              SELECT 
                tr.id
              FROM
                transaction_record tr
              LEFT JOIN customer_discount cd ON cd.id = tr.customer_discount_id AND cd.is_used = TRUE 
              WHERE tr.customer_id = :customer_id 
              AND tr.customer_discount_id IS NOT NULL 
              AND cd.is_used = true
              ORDER BY id DESC
              LIMIT 1) 
            AND customer_id = :customer_id and status = :status';

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult(TransactionRecord::class, 'tr')
            ->addFieldResult('tr', 'id', 'id');

        $query = $this
            ->getEntityManager()
            ->createNativeQuery($rawQuery, $rsm);

        $query
            ->setParameter('customer_id', $customer->getId())
            ->setParameter('status', 'authorized');

        return $returnArray ? $query->getArrayResult() : $query->getResult();
    }
}
